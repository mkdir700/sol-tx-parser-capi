name: Publish Python Package

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-libs:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact: libsoltxparser.so
            platform: linux
          - os: macos-latest
            artifact: libsoltxparser.dylib
            platform: macos
          - os: windows-latest
            artifact: soltxparser.dll
            platform: windows
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    
    - name: Build library
      shell: bash
      run: |
        mkdir -p build
        if [ "${{ matrix.platform }}" = "windows" ]; then
          CGO_ENABLED=1 GOOS=windows go build -buildmode=c-shared -o build/soltxparser.dll ./capi
          mkdir -p python/src/solana_tx_parser/lib/
          cp build/soltxparser.dll python/src/solana_tx_parser/lib/
        else
          make
        fi
    
    - name: Upload library artifact
      uses: actions/upload-artifact@v3
      with:
        name: lib-${{ matrix.platform }}
        path: build/${{ matrix.artifact }}

  test-deploy:
    needs: build-libs
    runs-on: ubuntu-latest
    environment: testpypi
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Prepare libraries
      run: |
        mkdir -p python/src/solana_tx_parser/lib
        cp artifacts/lib-linux/libsoltxparser.so python/src/solana_tx_parser/lib/
        cp artifacts/lib-macos/libsoltxparser.dylib python/src/solana_tx_parser/lib/
        cp artifacts/lib-windows/soltxparser.dll python/src/solana_tx_parser/lib/
    
    - name: Install PDM
      run: |
        curl -sSL https://pdm.fming.dev/install-pdm.py | python3 -
    
    - name: Build and publish to TestPyPI
      env:
        TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        cd python
        VERSION=$(python3 -c "import time; print('0.0.1.dev' + time.strftime('%Y%m%d%H%M%S'))")
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        pdm build
        pdm publish --repository https://test.pypi.org/legacy/ --username __token__ --password $TEST_PYPI_API_TOKEN

  deploy:
    needs: [build-libs, test-deploy]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: release
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Prepare libraries
      run: |
        mkdir -p python/src/solana_tx_parser/lib
        cp artifacts/lib-linux/libsoltxparser.so python/src/solana_tx_parser/lib/
        cp artifacts/lib-macos/libsoltxparser.dylib python/src/solana_tx_parser/lib/
        cp artifacts/lib-windows/soltxparser.dll python/src/solana_tx_parser/lib/
    
    - name: Install PDM
      run: |
        curl -sSL https://pdm.fming.dev/install-pdm.py | python3 -
    
    - name: Build and publish to PyPI
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        cd python
        pdm build
        pdm publish --username __token__ --password $PYPI_API_TOKEN